// Generated by gencpp from file chassis_ros/batteryResponse.msg
// DO NOT EDIT!


#ifndef CHASSIS_ROS_MESSAGE_BATTERYRESPONSE_H
#define CHASSIS_ROS_MESSAGE_BATTERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_ros
{
template <class ContainerAllocator>
struct batteryResponse_
{
  typedef batteryResponse_<ContainerAllocator> Type;

  batteryResponse_()
    : battery_percentage(0)
    , battery_status(0)  {
    }
  batteryResponse_(const ContainerAllocator& _alloc)
    : battery_percentage(0)
    , battery_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _battery_percentage_type;
  _battery_percentage_type battery_percentage;

   typedef int32_t _battery_status_type;
  _battery_status_type battery_status;





  typedef boost::shared_ptr< ::chassis_ros::batteryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_ros::batteryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct batteryResponse_

typedef ::chassis_ros::batteryResponse_<std::allocator<void> > batteryResponse;

typedef boost::shared_ptr< ::chassis_ros::batteryResponse > batteryResponsePtr;
typedef boost::shared_ptr< ::chassis_ros::batteryResponse const> batteryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_ros::batteryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_ros::batteryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_ros::batteryResponse_<ContainerAllocator1> & lhs, const ::chassis_ros::batteryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.battery_percentage == rhs.battery_percentage &&
    lhs.battery_status == rhs.battery_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_ros::batteryResponse_<ContainerAllocator1> & lhs, const ::chassis_ros::batteryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ros::batteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ros::batteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ros::batteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ros::batteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ros::batteryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ros::batteryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_ros::batteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6fbe9033580990101a748eb87aa0234";
  }

  static const char* value(const ::chassis_ros::batteryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6fbe90335809901ULL;
  static const uint64_t static_value2 = 0x01a748eb87aa0234ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_ros::batteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_ros/batteryResponse";
  }

  static const char* value(const ::chassis_ros::batteryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_ros::batteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 服务器响应发送的数据\n"
"int32 battery_percentage\n"
"int32 battery_status\n"
;
  }

  static const char* value(const ::chassis_ros::batteryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_ros::batteryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_percentage);
      stream.next(m.battery_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct batteryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_ros::batteryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_ros::batteryResponse_<ContainerAllocator>& v)
  {
    s << indent << "battery_percentage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_percentage);
    s << indent << "battery_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_ROS_MESSAGE_BATTERYRESPONSE_H
