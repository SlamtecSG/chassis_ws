// Generated by gencpp from file chassis_ros/health_infoResponse.msg
// DO NOT EDIT!


#ifndef CHASSIS_ROS_MESSAGE_HEALTH_INFORESPONSE_H
#define CHASSIS_ROS_MESSAGE_HEALTH_INFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_ros
{
template <class ContainerAllocator>
struct health_infoResponse_
{
  typedef health_infoResponse_<ContainerAllocator> Type;

  health_infoResponse_()
    : health_flag(0)
    , error_count(0)
    , error_codes()
    , error_msgs()  {
    }
  health_infoResponse_(const ContainerAllocator& _alloc)
    : health_flag(0)
    , error_count(0)
    , error_codes(_alloc)
    , error_msgs(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _health_flag_type;
  _health_flag_type health_flag;

   typedef int32_t _error_count_type;
  _error_count_type error_count;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _error_codes_type;
  _error_codes_type error_codes;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _error_msgs_type;
  _error_msgs_type error_msgs;





  typedef boost::shared_ptr< ::chassis_ros::health_infoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_ros::health_infoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct health_infoResponse_

typedef ::chassis_ros::health_infoResponse_<std::allocator<void> > health_infoResponse;

typedef boost::shared_ptr< ::chassis_ros::health_infoResponse > health_infoResponsePtr;
typedef boost::shared_ptr< ::chassis_ros::health_infoResponse const> health_infoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_ros::health_infoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_ros::health_infoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_ros::health_infoResponse_<ContainerAllocator1> & lhs, const ::chassis_ros::health_infoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.health_flag == rhs.health_flag &&
    lhs.error_count == rhs.error_count &&
    lhs.error_codes == rhs.error_codes &&
    lhs.error_msgs == rhs.error_msgs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_ros::health_infoResponse_<ContainerAllocator1> & lhs, const ::chassis_ros::health_infoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ros::health_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ros::health_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ros::health_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "218741a7ad4b8cd149aa0179c433c775";
  }

  static const char* value(const ::chassis_ros::health_infoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x218741a7ad4b8cd1ULL;
  static const uint64_t static_value2 = 0x49aa0179c433c775ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_ros/health_infoResponse";
  }

  static const char* value(const ::chassis_ros::health_infoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 服务器响应发送的数据\n"
"int32 health_flag\n"
"int32 error_count\n"
"int32[] error_codes\n"
"string[] error_msgs\n"
;
  }

  static const char* value(const ::chassis_ros::health_infoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.health_flag);
      stream.next(m.error_count);
      stream.next(m.error_codes);
      stream.next(m.error_msgs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct health_infoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_ros::health_infoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_ros::health_infoResponse_<ContainerAllocator>& v)
  {
    s << indent << "health_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.health_flag);
    s << indent << "error_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_count);
    s << indent << "error_codes[]" << std::endl;
    for (size_t i = 0; i < v.error_codes.size(); ++i)
    {
      s << indent << "  error_codes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.error_codes[i]);
    }
    s << indent << "error_msgs[]" << std::endl;
    for (size_t i = 0; i < v.error_msgs.size(); ++i)
    {
      s << indent << "  error_msgs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_msgs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_ROS_MESSAGE_HEALTH_INFORESPONSE_H
